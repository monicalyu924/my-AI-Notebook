name: AI智能记事本 - 自动化部署

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ai-notebook

jobs:
  # 代码质量检查
  quality-check:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 安装前端依赖
        working-directory: ./frontend
        run: npm ci

      - name: ESLint检查
        working-directory: ./frontend
        run: npm run lint

      - name: TypeScript检查
        working-directory: ./frontend
        run: npm run type-check || true

      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 安装后端依赖
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort

      - name: Python代码格式检查
        working-directory: ./backend
        run: |
          flake8 . --max-line-length=88 --extend-ignore=E203,W503
          black --check .
          isort --check-only .

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行Trivy漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传Trivy扫描结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 前端依赖安全审计
        working-directory: ./frontend
        run: npm audit --audit-level moderate

      - name: Python依赖安全审计
        working-directory: ./backend
        run: |
          pip install safety
          safety check

  # 构建和测试
  build-and-test:
    name: 构建和测试
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到容器镜像仓库
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: 构建和推送Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 集成测试
  integration-test:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: build-and-test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 安装依赖
        run: |
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt

      - name: 运行后端测试
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci-cd-testing-only
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci-cd-testing-only
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: 运行前端测试
        working-directory: ./frontend
        run: npm run test:ci || true

      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # 部署到staging环境
  deploy-staging:
    name: 部署到Staging环境
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.ai-notebook.com

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到Staging服务器
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/ai-notebook-staging
            git pull origin develop
            docker-compose -f docker-compose.staging.yml down
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            docker system prune -f

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://ai-notebook.com

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 创建部署包
        run: |
          tar -czf deploy.tar.gz \
            docker-compose.yml \
            .env.example \
            nginx/ \
            ssl/ \
            monitoring/

      - name: 上传部署包
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          source: deploy.tar.gz
          target: /tmp/

      - name: 部署到生产服务器
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/ai-notebook
            
            # 备份当前版本
            sudo systemctl stop ai-notebook || true
            tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz . || true
            
            # 解压新版本
            tar -xzf /tmp/deploy.tar.gz -C .
            
            # 更新Docker镜像
            docker-compose pull
            
            # 运行数据库迁移
            docker-compose run --rm backend python migrations.py
            
            # 启动服务
            docker-compose up -d
            
            # 验证部署
            sleep 30
            curl -f http://localhost/health || exit 1
            curl -f http://localhost:8000/health || exit 1
            
            # 清理旧镜像
            docker system prune -f
            
            echo "生产环境部署完成"

  # 通知
  notify:
    name: 部署通知
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 发送Slack通知
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            AI智能记事本部署状态: ${{ job.status }}
            分支: ${{ github.ref }}
            提交: ${{ github.sha }}
            作者: ${{ github.actor }}

      - name: 发送邮件通知
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "AI智能记事本部署失败"
          body: |
            部署失败详情:
            
            仓库: ${{ github.repository }}
            分支: ${{ github.ref }}
            提交: ${{ github.sha }}
            作者: ${{ github.actor }}
            
            请检查GitHub Actions日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: AI Notebook CI/CD <noreply@ai-notebook.com>