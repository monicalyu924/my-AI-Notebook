{"version":3,"file":"tw-merge.cjs.development.js","sources":["../src/lib/create-lru-cache.ts","../src/lib/utils.ts","../src/lib/create-merge.ts","../src/rules.ts","../src/tailwind.ts","../src/index.ts"],"sourcesContent":["interface LruCache<Key, Value> {\n  get(key: Key): Value | undefined;\n  set(key: Key, value: Value): Value;\n}\n\n// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\nexport function createLruCache<Key, Value>(\n  maxCacheSize: number\n): LruCache<Key, Value> {\n  if (maxCacheSize < 1)\n    return { get: () => undefined, set: (_, value) => value };\n\n  let cacheSize = 0;\n  let cache = new Map<Key, Value>();\n  let previousCache = new Map<Key, Value>();\n\n  function update(key: Key, value: Value) {\n    cache.set(key, value);\n    cacheSize++;\n\n    if (cacheSize > maxCacheSize) {\n      cacheSize = 0;\n      previousCache = cache;\n      cache = new Map();\n    }\n  }\n\n  return {\n    get(key) {\n      let value = cache.get(key);\n      if (value !== undefined) return value;\n      if ((value = previousCache.get(key)) !== undefined) {\n        update(key, value);\n        return value;\n      }\n    },\n    set(key, value) {\n      if (cache.has(key)) cache.set(key, value);\n      else update(key, value);\n      return value;\n    },\n  };\n}\n","export function isNumericValue(value?: string) {\n  if (!value) return true;\n  const arbitraryValue = value.match(/^\\[(.*)\\]$/)?.[1];\n  return !isNaN(parseInt(arbitraryValue ?? value));\n}\n\nfunction sortContextSection(section: string[], separator: string) {\n  return section\n    .sort((a, b) => {\n      if (a.startsWith(\"[\") || b.startsWith(\"[\")) return 0;\n      return a.localeCompare(b);\n    })\n    .join(separator);\n}\n\nexport function normalizeContext(context: string, separator: string) {\n  if (!context) return context;\n  const important = context.endsWith(\"!\");\n  const variants = context.replace(/:!?$/, \"\").split(separator);\n  let section: string[] = [];\n  let normalizedSections: string[] = [];\n  function commitSection() {\n    if (section.length > 0)\n      normalizedSections.push(sortContextSection(section, separator));\n  }\n  for (let i = 0; i < variants.length; i++) {\n    const variant = variants[i]!;\n    if (variant.startsWith(\"[\")) {\n      // is arbitrary variant\n      commitSection();\n      normalizedSections.push(variant);\n      section = [];\n    } else section.push(variant);\n  }\n  commitSection();\n\n  return `${normalizedSections.join(separator)}${separator}${\n    important ? \"!\" : \"\"\n  }`;\n}\n","import { Handler, RuleSet } from \"../rules\";\n\nimport { createLruCache } from \"./create-lru-cache\";\nimport { normalizeContext } from \"./utils\";\n\ntype ParsedRule = [RegExp, Handler];\n\nexport type CreateMergeConfig = {\n  cacheSize?: number;\n  separator?: string;\n  prefix?: string;\n};\n\nexport function createMerge(\n  ruleSet: RuleSet,\n  { cacheSize = 500, separator = \":\", prefix }: CreateMergeConfig = {}\n) {\n  const cache = createLruCache<string, string>(cacheSize);\n\n  const parsedRuleSet = ruleSet.map(\n    ([regExp, handler]) =>\n      [\n        new RegExp(\n          `^(?<c>.*${separator}!?|!?)?-?${prefix ? `${prefix}-` : \"\"}${regExp}`\n        ),\n        handler,\n      ] as ParsedRule\n  );\n\n  function merge(className: string) {\n    const cached = cache.get(className);\n    if (cached !== undefined) return cached;\n\n    const memoryStore: Partial<Record<string, unknown>>[] = [];\n\n    const classes = className.split(\" \");\n\n    const outputClasses: string[] = [];\n\n    // - for each class from right to left\n    for (let classI = classes.length - 1; classI >= 0; classI--) {\n      const currentClass = classes[classI]!;\n      let didNotMatchOrWasContinued = true;\n      // - for each rule\n      for (let ruleI = 0; ruleI < parsedRuleSet.length; ruleI++) {\n        const rule = parsedRuleSet[ruleI]!;\n        const regexp = rule[0];\n        const match = currentClass.match(regexp);\n\n        // - if class matches rule, execute it\n        if (match) {\n          didNotMatchOrWasContinued = false;\n          const groups = match.groups!;\n          const context = normalizeContext(groups?.c ?? \"\", separator);\n          const handler = rule[1];\n\n          const memory = ((memoryStore[ruleI] ??= {})[context] ??= {});\n\n          const result = handler(memory, groups!);\n          const keepClass = result === true;\n          const continueToNextRule = result === \"c\";\n\n          if (keepClass) outputClasses.unshift(currentClass);\n\n          // - finish with the class unless the rule says so\n          if (!continueToNextRule) break;\n\n          didNotMatchOrWasContinued = true;\n        }\n      }\n\n      if (didNotMatchOrWasContinued) outputClasses.unshift(currentClass);\n    }\n\n    return cache.set(className, outputClasses.join(\" \"));\n  }\n\n  return merge;\n}\n","import { isNumericValue } from \"./lib/utils\";\n\nexport type Handler<T = any> = (\n  memory: T,\n  matches: NonNullable<RegExpMatchArray[\"groups\"]>\n) => boolean | \"c\"; // keep class | continue to next rule\n\nexport type Rule = [string, Handler];\nexport type RuleSet = Rule[];\n\nexport const TRAILING_SLASH_REGEXP = \"(\\\\/\\\\d+)?\";\nexport const VALUE_REGEXP = `(-(?<v>.+?)${TRAILING_SLASH_REGEXP})?`;\n\n// simple rule\n// -----------\n\nexport type SimpleHandlerOptions = { byType?: boolean };\n\nexport function createSimpleHandler({ byType }: SimpleHandlerOptions = {}) {\n  const simpleHandler: Handler<\n    Record<string, Partial<Record<\"number\" | \"other\", boolean>>>\n  > = (memory, { v: value, t: target }) => {\n    const type = byType && isNumericValue(value) ? \"number\" : \"other\";\n    const mem = (memory[target!] ??= {});\n\n    // seen before\n    if (mem[type]) return false;\n\n    // never seen\n    return (mem[type] = true);\n  };\n\n  return simpleHandler;\n}\n\nexport type SimpleRuleOptions = SimpleHandlerOptions;\n\nexport function simpleRule(\n  target: string,\n  { byType }: SimpleRuleOptions = {}\n): Rule {\n  const regExp = `(?<t>${target})${VALUE_REGEXP}$`;\n  return [regExp, createSimpleHandler({ byType })];\n}\n\n// cardinal rule\n// -------------\n\nexport type CardinalHandlerOptions = {\n  byType?: boolean;\n};\n\ntype Direction = string;\n\nconst CARDINAL_OVERRIDES: Record<string, string> = {\n  t: \",y,tl,tr\",\n  r: \",x,tr,br\",\n  b: \",y,br,bl\",\n  l: \",x,bl,tl\",\n  x: \"\",\n  y: \"\",\n  s: \"\",\n  e: \"\",\n  ss: \",e,s\",\n  se: \",e,s\",\n  es: \",e,s\",\n  ee: \",e,s\",\n};\nconst CARDINAL_DIRECTIONS =\n  Object.keys(CARDINAL_OVERRIDES).join(\"|\") + \"|tl|tr|br|bl\";\n\nexport function createCardinalHandler({ byType }: CardinalHandlerOptions = {}) {\n  const cardinalHandler: Handler<\n    Partial<Record<Direction, Partial<Record<\"number\" | \"other\", boolean>>>> & {\n      _?: Partial<Record<\"number\" | \"other\", Set<string>>>;\n    }\n  > = (memory, { v: value, d: direction = \"\" }) => {\n    const type = byType && isNumericValue(value) ? \"number\" : \"other\";\n    const mem = (memory[direction] ??= {});\n\n    // seen before\n    if (mem[type]) return false;\n\n    // apply override\n    const memOverriders = ((memory._ ??= {})[type] ??= new Set());\n    if (\n      CARDINAL_OVERRIDES[direction]\n        ?.split(\",\")\n        .some((dir) => memOverriders.has(dir))\n    )\n      return false;\n\n    // remember overrider\n    memOverriders.add(direction);\n\n    // never seen\n    mem[type] = true;\n    return true;\n  };\n\n  return cardinalHandler;\n}\n\nexport type CardinalRuleOptions = {\n  /**\n   * Whether the direction is dash-separated (e.g. `border-t-2`)\n   * @default true\n   */\n  dash?: boolean;\n} & CardinalHandlerOptions;\n\nexport function cardinalRule(\n  target: string,\n  { dash = true, byType }: CardinalRuleOptions = {}\n): Rule {\n  const _target = `${target}(${dash ? \"-\" : \"\"}(?<d>${CARDINAL_DIRECTIONS}))?`;\n  const regExp = `${_target}${VALUE_REGEXP}$`;\n  return [regExp, createCardinalHandler({ byType })];\n}\n\nexport function cardinalRules(targets: string, options?: CardinalRuleOptions) {\n  const _targets = targets.split(\"|\");\n  return _targets.map((target) => cardinalRule(target, options));\n}\n\n// unique rule\n// -----------\n\nexport function createUniqueHandler() {\n  const uniqueHandler: Handler<Record<string, boolean>> = (memory, groups) => {\n    const key = Object.entries(groups).find((x) => x[1])![0];\n    return memory[key] ? false : (memory[key] = true);\n  };\n  return uniqueHandler;\n}\n\nexport type UniqueRuleOptions = { prefix?: string; def?: boolean };\n\nexport function uniqueRule(targets: (string | string[])[]): Rule {\n  const regExp = `(${targets\n    .map((target, targetI) =>\n      Array.isArray(target)\n        ? target\n            .slice(1)\n            .map(\n              (subtarget, subtargetI) =>\n                `(?<i${targetI}_${subtargetI}>${`${target[0]}-(${subtarget})`})`\n            )\n        : `(?<i${targetI}>${target})`\n    )\n    .flat()\n    .join(\"|\")})${TRAILING_SLASH_REGEXP}$`;\n  return [regExp, createUniqueHandler()];\n}\n\n// arbitrary rule\n// --------------\n\nexport function createArbitraryHandler() {\n  const arbitraryHandler: Handler<Record<string, { done?: boolean }>> = (\n    memory,\n    { p: property }\n  ) => {\n    const mem = (memory[property!] ??= {});\n\n    // seen before\n    if (mem.done) return false;\n\n    // never seen\n    return (mem.done = true);\n  };\n\n  return arbitraryHandler;\n}\n\nexport function arbitraryRule(): Rule {\n  return [`\\\\[(?<p>.+?):.*\\\\]$`, createArbitraryHandler()];\n}\n\n// conflict rule\n// -------------\n\nexport type ConflictRuleTargets = Record<string, string>;\n\nexport function createConflictHandler(targets: ConflictRuleTargets) {\n  const overridableMap: Record<string, string[]> = {};\n  Object.entries(targets).forEach(([overridingUtility, overridableUtilities]) =>\n    overridableUtilities.split(\"|\").forEach((value) => {\n      overridableMap[value] ??= [];\n      overridableMap[value]!.push(overridingUtility);\n    })\n  );\n\n  const conflictHandler: Handler<Record<string, boolean>> = (\n    memory,\n    { u: utility }\n  ) => {\n    // is overridable utility and overriding utility has been seen\n    const skipClass = Boolean(\n      utility! in overridableMap &&\n        overridableMap[utility!]!.some((u) => memory[u])\n    );\n    if (skipClass) return false;\n\n    // is overriding utility\n    if (utility! in targets) memory[utility!] = true;\n\n    // continue evaluating other rules\n    return \"c\";\n  };\n\n  return conflictHandler;\n}\n\nexport function conflictRule(targets: ConflictRuleTargets): Rule {\n  const overridingUtilities = Object.keys(targets);\n  const overridableUtilities = Object.values(targets).join(\"|\").split(\"|\");\n  const matchingClasses = [...overridingUtilities, ...overridableUtilities];\n  const utility = `(?<u>${matchingClasses.join(\"|\")})`;\n  const regExp = `${utility}${VALUE_REGEXP}$`;\n  return [regExp, createConflictHandler(targets)];\n}\n","import {\n  RuleSet,\n  uniqueRule,\n  simpleRule,\n  cardinalRules,\n  cardinalRule,\n  arbitraryRule,\n  conflictRule,\n} from \"./rules\";\n\nconst DISPLAY =\n  \"block|inline-block|inline-flex|inline-table|inline-grid|inline|flex|table-caption|table-cell|table-column-group|table-column|table-footer-group|table-header-group|table-row-group|table-row|table|flow-root|grid|contents|list-item|hidden\";\n\nconst ISOLATION = \"isolate|isolation-auto\";\n\nconst OBJECT_FIT = \"contain|cover|fill|none|scale-down\";\nconst BG_AND_OBJECT_POSITION =\n  \"bottom|center|left|left-bottom|left-top|right|right-bottom|right-top|top\";\n\nconst POSITION = \"static|fixed|absolute|relative|sticky\";\n\nconst VISIBILITY = \"visible|invisible|collapse\";\n\nconst FLEX_DIRECTION = \"row|row-reverse|col|col-reverse\";\nconst FLEX_WRAP = \"wrap|wrap-reverse|nowrap\";\n\nconst ALIGN_CONTENT =\n  \"normal|center|start|end|between|around|evenly|baseline|stretch\";\n\nconst FONT_AND_SHADOW_SIZE = \"xs|sm|base|md|lg|xl|[\\\\d.]+xl|inner|none\";\nconst FONT_SMOOTHING = \"antialiased|subpixel-antialiased\";\nconst FONT_STYLE = \"italic|not-italic\";\nconst FONT_WEIGHT =\n  \"thin|extralight|light|normal|medium|semibold|bold|extrabold|black\";\n\nconst LIST_STYLE_POSITION = \"inside|outside\";\n\nconst TEXT_ALIGN = \"left|center|right|justify|start|end\";\nconst TEXT_DECORATION = \"underline|overline|line-through|no-underline\";\nconst TEXT_DECORATION_STYLE = \"solid|double|dotted|dashed|wavy\";\nconst TEXT_TRANSFORM = \"uppercase|lowercase|capitalize|normal-case\";\nconst TEXT_OVERFLOW = \"truncate|text-ellipsis|text-clip\";\n\nconst BG_ATTACHMENT = \"fixed|local|scroll\";\nconst BG_REPEAT =\n  \"repeat|no-repeat|repeat-x|repeat-y|repeat-round|repeat-space\";\nconst BG_SIZE = \"auto|cover|contain\";\n\nconst BORDER_AND_OUTLINE_STYLE = \"solid|dashed|dotted|double|hidden|none\";\n\nconst FVN_FIGURE = \"lining-nums|oldstyle-nums\";\nconst FVN_SPACING = \"proportional-nums|tabular-nums\";\nconst FVN_FRACTION = \"diagonal-fractions|stacked-fractions\";\n\nconst SCROLL_BEHAVIOR = \"auto|smooth\";\nconst SCROLL_SNAP_ALIGN = \"start|end|center|none\";\nconst SCROLL_SNAP_STOP = \"normal|always\";\nconst SCROLL_SNAP_TYPE = \"none|x|y|both|mandatory|proximity\";\n\n// TODO: text-<something>/20 should override line-height (leading)\n// TODO: ^ same with opacities and other trailing slash values\n// TODO: text-decoration-thickness (conflicts with text-decoration-color and there are custom values: auto and from-font)\nexport function tailwind(): RuleSet {\n  return [\n    // these rules are at the top because they need to run before others\n    conflictRule({\n      \"inset-x\": \"left|right\",\n      \"inset-y\": \"top|bottom\",\n      inset: \"inset-x|inset-y|start|end|left|right|top|bottom\",\n      \"sr-only\": \"not-sr-only\",\n      \"not-sr-only\": \"sr-only\",\n      \"normal-nums\":\n        \"ordinal|slashed-zero|lining-nums|oldstyle-nums|proportional-nums|tabular-nums|diagonal-fractions|stacked-fractons\",\n      ordinal: \"normal-nums\",\n      \"slashed-zero\": \"normal-nums\",\n      \"lining-nums\": \"normal-nums\",\n      \"oldstyle-nums\": \"normal-nums\",\n      \"proportional-nums\": \"normal-nums\",\n      \"tabular-nums\": \"normal-nums\",\n      \"diagonal-fractions\": \"normal-nums\",\n      \"stacked-fractons\": \"normal-nums\",\n      \"bg-gradient\": \"bg-none\",\n      \"bg-none\": \"bg-gradient\",\n    }),\n    uniqueRule([\n      DISPLAY,\n      ISOLATION,\n      POSITION,\n      VISIBILITY,\n      FONT_SMOOTHING,\n      FONT_STYLE,\n      FVN_FIGURE,\n      FVN_SPACING,\n      FVN_FRACTION,\n      TEXT_DECORATION,\n      TEXT_TRANSFORM,\n      TEXT_OVERFLOW,\n    ]),\n    uniqueRule([\n      [\"content\", ALIGN_CONTENT],\n      [\"list\", LIST_STYLE_POSITION],\n      [\"decoration\", TEXT_DECORATION_STYLE],\n      [\"border\", BORDER_AND_OUTLINE_STYLE],\n      [\"divide\", BORDER_AND_OUTLINE_STYLE],\n      [\"outline|outline\", BORDER_AND_OUTLINE_STYLE],\n      [\"shadow\", FONT_AND_SHADOW_SIZE],\n      [\"font\", FONT_WEIGHT],\n      [\"object\", OBJECT_FIT, BG_AND_OBJECT_POSITION],\n    ]),\n    uniqueRule([\n      [\n        \"scroll\",\n        SCROLL_BEHAVIOR,\n        SCROLL_SNAP_ALIGN,\n        SCROLL_SNAP_STOP,\n        SCROLL_SNAP_TYPE,\n      ],\n      [\"bg\", BG_ATTACHMENT, BG_AND_OBJECT_POSITION, BG_REPEAT, BG_SIZE],\n      [\"text\", TEXT_ALIGN, FONT_AND_SHADOW_SIZE],\n      [\"flex\", FLEX_DIRECTION, FLEX_WRAP],\n    ]),\n    conflictRule({ flex: \"basis|grow|shrink\" }),\n    // -----------------------------------------------------------------\n    simpleRule(\n      \"accent|align|animate|aspect|auto-cols|auto-rows|backdrop-blur|backdrop-brightness|backdrop-contrast|backdrop-grayscale|backdrop-hue-rotate|backdrop-invert|backdrop-opacity|backdrop-saturate|backdrop-sepia|basis|bg-blend|bg-clip|bg-origin|bg-none|bg-gradient|bg|blur|border-collapse|border-spacing|bottom|box-decoration|box|break-after|break-before|break-inside|break|brightness|caption|caret|clear|col-end|col-start|columns|col|content|contrast|cursor|decoration|delay|divide-x-reverse|divide-x|divide-y-reverse|divide-y|divide|drop-shadow|duration|ease|end|fill|flex|float|grayscale|grid-cols|grid-flow|grid-rows|grow|hue-rotate|hyphens|h|indent|invert|items|justify-items|justify-self|justify|leading|left|line-clamp|list-image|list|max-h|max-w|min-h|min-w|mix-blend|opacity|order|origin|outline-offset|place-content|place-items|place-self|pointer-events|resize|right|ring-inset|rotate|row-end|row-start|row|saturate|select|self|sepia|shadow|shrink|skew-x|skew-y|space-x-reverse|space-x|space-y-reverse|space-y|start|table|top|touch|tracking|transition|translate-x|translate-y|underline-offset|whitespace|will-change|w|z\"\n    ),\n    simpleRule(\"text|outline|ring-offset|ring|from|via|to|stroke|font\", {\n      byType: true,\n    }),\n    cardinalRule(\"border\", { byType: true }),\n    ...cardinalRules(\"rounded|gap|inset|scale|overflow|overscroll\"),\n    ...cardinalRules(\"p|m|scroll-m|scroll-p\", { dash: false }),\n    arbitraryRule(),\n  ];\n}\n","import { createMerge } from \"./lib/create-merge\";\nimport { tailwind } from \"./tailwind\";\n\nexport { createMerge, tailwind };\nexport {\n  arbitraryRule,\n  cardinalRule,\n  cardinalRules,\n  conflictRule,\n  simpleRule,\n  uniqueRule,\n} from \"./rules\";\n\nexport const twMerge = createMerge(tailwind());\n"],"names":["createLruCache","maxCacheSize","get","undefined","set","_","value","cacheSize","cache","Map","previousCache","update","key","has","isNumericValue","arbitraryValue","match","isNaN","parseInt","sortContextSection","section","separator","sort","a","b","startsWith","localeCompare","join","normalizeContext","context","important","endsWith","variants","replace","split","normalizedSections","commitSection","length","push","i","variant","createMerge","ruleSet","prefix","parsedRuleSet","map","regExp","handler","RegExp","merge","className","cached","memoryStore","classes","outputClasses","classI","currentClass","didNotMatchOrWasContinued","ruleI","rule","regexp","groups","c","memory","result","keepClass","continueToNextRule","unshift","TRAILING_SLASH_REGEXP","VALUE_REGEXP","createSimpleHandler","byType","simpleHandler","v","target","t","type","mem","simpleRule","CARDINAL_OVERRIDES","r","l","x","y","s","e","ss","se","es","ee","CARDINAL_DIRECTIONS","Object","keys","createCardinalHandler","cardinalHandler","d","direction","memOverriders","Set","some","dir","add","cardinalRule","dash","_target","cardinalRules","targets","options","_targets","createUniqueHandler","uniqueHandler","entries","find","uniqueRule","targetI","Array","isArray","slice","subtarget","subtargetI","flat","createArbitraryHandler","arbitraryHandler","property","p","done","arbitraryRule","createConflictHandler","overridableMap","forEach","overridingUtility","overridableUtilities","conflictHandler","utility","u","skipClass","Boolean","conflictRule","overridingUtilities","values","matchingClasses","DISPLAY","ISOLATION","OBJECT_FIT","BG_AND_OBJECT_POSITION","POSITION","VISIBILITY","FLEX_DIRECTION","FLEX_WRAP","ALIGN_CONTENT","FONT_AND_SHADOW_SIZE","FONT_SMOOTHING","FONT_STYLE","FONT_WEIGHT","LIST_STYLE_POSITION","TEXT_ALIGN","TEXT_DECORATION","TEXT_DECORATION_STYLE","TEXT_TRANSFORM","TEXT_OVERFLOW","BG_ATTACHMENT","BG_REPEAT","BG_SIZE","BORDER_AND_OUTLINE_STYLE","FVN_FIGURE","FVN_SPACING","FVN_FRACTION","SCROLL_BEHAVIOR","SCROLL_SNAP_ALIGN","SCROLL_SNAP_STOP","SCROLL_SNAP_TYPE","tailwind","inset","ordinal","flex","twMerge"],"mappings":"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"}