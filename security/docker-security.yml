# Docker安全配置
# 容器运行时安全设置

version: '3.8'

# 安全服务配置
services:
  # 前端安全配置
  frontend-secure:
    extends:
      file: ../docker-compose.yml
      service: frontend
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=128m
      - /var/run:noexec,nosuid,size=64m
      - /var/cache/nginx:noexec,nosuid,size=64m
    volumes:
      - ./logs/nginx:/var/log/nginx:rw
    user: "101:101"  # nginx用户
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 后端安全配置
  backend-secure:
    extends:
      file: ../docker-compose.yml
      service: backend
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=256m
      - /var/run:noexec,nosuid,size=64m
    volumes:
      - ./logs/backend:/app/logs:rw
      - ./uploads:/app/uploads:rw
    user: "1000:1000"  # 非root用户
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 数据库安全配置
  postgres-secure:
    extends:
      file: ../docker-compose.yml
      service: postgres
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=128m
      - /var/run/postgresql:noexec,nosuid,size=64m
    volumes:
      - postgres_data_secure:/var/lib/postgresql/data:rw
    user: "999:999"  # postgres用户
    environment:
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key
      -c ssl_ciphers='ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256'
      -c ssl_prefer_server_ciphers=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_statement=all
      -c log_min_duration_statement=1000
      -c shared_preload_libraries=pg_stat_statements
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_notebook"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis安全配置
  redis-secure:
    extends:
      file: ../docker-compose.yml
      service: redis
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=64m
    volumes:
      - redis_data_secure:/data:rw
    user: "999:1000"  # redis用户
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
      --bind 0.0.0.0
      --protected-mode yes
      --port 6379
      --tcp-backlog 511
      --databases 1
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --stop-writes-on-bgsave-error yes
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx反向代理安全配置
  nginx-secure:
    image: nginx:1.24-alpine
    container_name: ai-notebook-nginx-secure
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=64m
      - /var/run:noexec,nosuid,size=32m
      - /var/cache/nginx:noexec,nosuid,size=64m
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/security:/etc/nginx/security:ro
      - ./logs/nginx:/var/log/nginx:rw
    user: "101:101"  # nginx用户
    depends_on:
      - frontend-secure
      - backend-secure
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 安全扫描器
  security-scanner:
    image: aquasec/trivy:latest
    container_name: ai-notebook-security-scanner
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=128m
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security/scan-results:/results:rw
    command: >
      sh -c "
      while true; do
        trivy image --format json --output /results/frontend-scan.json ai-notebook-frontend-secure || true
        trivy image --format json --output /results/backend-scan.json ai-notebook-backend-secure || true
        trivy image --format json --output /results/postgres-scan.json postgres:15-alpine || true
        trivy image --format json --output /results/redis-scan.json redis:7-alpine || true
        sleep 86400
      done
      "
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # 日志聚合器
  log-aggregator:
    image: fluent/fluent-bit:2.1
    container_name: ai-notebook-log-aggregator
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=64m
    volumes:
      - ./logs:/var/log:ro
      - ./monitoring/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    ports:
      - "24224:24224"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# 安全网络配置
networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    internal: false

  # 内部网络（数据库和缓存）
  internal:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1

# 安全卷配置
volumes:
  postgres_data_secure:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-notebook/data/postgres
  
  redis_data_secure:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-notebook/data/redis

# 安全配置说明
x-security-notes:
  description: |
    Docker安全配置要点：
    
    1. 容器权限最小化
       - 删除所有不必要的权限 (cap_drop: ALL)
       - 只添加必需的权限 (cap_add)
       - 禁用新权限获取 (no-new-privileges)
       
    2. 文件系统保护
       - 只读根文件系统 (read_only: true)
       - 临时文件系统挂载 (tmpfs)
       - 用户空间隔离 (user)
       
    3. 网络安全
       - 内部网络隔离
       - 端口映射最小化
       - 安全网络配置
       
    4. 资源限制
       - 内存限制
       - CPU限制
       - 日志大小限制
       
    5. 运行时安全
       - AppArmor配置
       - 健康检查
       - 自动重启策略
       
    6. 监控和审计
       - 安全扫描
       - 日志聚合
       - 实时监控